global N
N = 4

def printSolution(board):
	for i in range(N):
		for j in range(N):
			print(board[i][j], end = " ")
		print()
def isSafe(board, row, col):

	for i in range(col):
		if board[row][i] == 1:
			return False
	for i, j in zip(range(row, -1, -1),
					range(col, -1, -1)):
		if board[i][j] == 1:
			return False
	for i, j in zip(range(row, N, 1),
					range(col, -1, -1)):
		if board[i][j] == 1:
			return False

	return True

def solveNQUtil(board, col):
	
	if col >= N:
		return True

	for i in range(N):

		if isSafe(board, i, col):
			
			board[i][col] = 1

			if solveNQUtil(board, col + 1) == True:
				return True

			board[i][col] = 0
	return False

def solveNQ():
	board = [ [0, 0, 0, 0],
			[0, 0, 0, 0],
			[0, 0, 0, 0],
			[0, 0, 0, 0] ]

	if solveNQUtil(board, 0) == False:
		print ("Solution does not exist")
		return False

	printSolution(board)
	return True
solveNQ()












To design an n-Queens matrix with the first Queen placed and use backtracking to arrange the remaining Queens, you'd follow these steps:

1. Start with an empty n x n chessboard.
2. Place the first Queen in a specified row and column.
3. Use backtracking to find safe positions for the remaining Queens.
4. For each row starting from the second, try to place a Queen in each column of the row.
5. Check if the placement is safe, considering existing Queens' positions.
6. If a safe spot is found, place the Queen and move on to the next row.
7. If no safe spot is found in a row, backtrack to the previous row and explore different options.
8. Continue this process until all n Queens are placed or all possibilities are explored.
9. The final matrix will have a valid arrangement of n Queens.

Backtracking is essential to backtrack to the previous decision point when an invalid placement is encountered, allowing you to explore other possibilities until a valid solution is found or all options are exhausted. This approach ensures that the Queens do not threaten each other in the same row, column, or diagonal.
